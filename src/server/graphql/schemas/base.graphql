type User {
  id: Int
  firstName: String
  lastName: String
  email: String
  username: String
}

type Gallery {
  id: Int
  title: String
  description: String
  createdBy: User
  parent: Gallery
  childGalleries: [Gallery]
  images: [Image]
}

type Image {
  id: Int
  title: String
  href: String
  createdBy: User
  parent: Topic
  location: String
  comments: [Comment]
}

type Comment {
  id: Int
  title: String
  body: String
  createdBy: User
}

type Query {
  galleries(): [Gallery]
  gallery(id: ID): Gallery
  images(galleryId: ID): [Image]
  comments(imageId: ID!): [Comment]
  user(token: ID): User
}

"""
The **AuthPayload** returns a token to be saved for later requests and the user that was authenticated
"""
type AuthPayload {
  token: String
  user: User
}

"""
The **NewUserInput** is the data required for a new user to be created
"""
input NewUserInput {
  firstName: String!
  lastName: String!
  email: String!
  username: String!
  password: String!
}

"""
The **EditUserInput** is the data required for a new user to be created
"""
input EditUserInput {
  firstName: String!
  lastName: String!
  email: String!
  username: String!
}

"""
The **LoginInput** is the data required for a user to login
"""
input LoginInput {
  email: String!
  password: String!
}

"""
The **TopicInput** is the data required for a user to login
"""
input TopicInput {
  title: String!
  description: String!
  parentId: Int
}
type Mutation {

  """
  **signup** allows user to create an account
  """
  signup(
    newUserInput: NewUserInput!
  ): AuthPayload!

  """
  **login** allows a user to authenticate
  """
  login(loginInput: LoginInput!): AuthPayload!

  """
  **addTopic** creates a new topic
  """
  addTopic(topicInput: TopicInput!): Topic!
}